// 位运算

// 左移

// 将二进制全部左移， 然后补全右边空出来的一项
// 10 << 1  === 20  
// => 转换为二进制 全部往左挪一位
// 1010 -> 10100 === 20

// 右移
// 将二进制全部右移， 然后移除后右边多出来的一项
// 10 >> 1  === 5  
// => 转换为二进制 全部往右挪一位
// 1010 -> 101 === 5

// 按位操作

// 按位与 &
// 8 & 7 === 0
// 1000 0111 0000 === 0
// 每一位都是1，结果才是1
// 按位或 |
// 8 | 7 === 15
// 1000 0111 1111 === 15
// 存在一位是1，结果就是1

// 按位异或 ^
// 8 ^ 7 === 15
// 1000 0111 1111 === 15
// 每一位都不同，结果才为1


// 两数不使用四则运算，得出和
// 4 + 5 = 9
// 100 + 101 = 1001

// a + b = (a^b) + ((a & b) << 1)

function sum(a, b) {
    if (a === 0) return b;
    if (b === 0) return a;
    let newA = a ^ b; // 15
    let newB = (a & b) << 1; // 0 << 1 还是 0
    return sum(newA, newB);
}

console.log(sum(7, 8));